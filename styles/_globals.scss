@font-face {
  font-family: 'SanomatSansXLight';
  font-style: normal;
  font-weight: normal;
  src: local('SanomatSansXLight'), url('../assets/fonts/Sanomat SansXLight.woff') format('woff');
}
@font-face {
  font-family: 'SanomatSansLight';
  font-style: normal;
  font-weight: normal;
  src: local('SanomatSansLight'), url('../assets/fonts/Sanomat SansLight.woff') format('woff');
}

@font-face {
  font-family: 'SanomatSansRegular';
  font-style: normal;
  font-weight: normal;
  src: local('SanomatSansRegular'), url('../assets/fonts/Sanomat SansRegular.woff') format('woff');
}

@font-face {
  font-family: 'SanomatSansMedium';
  font-style: normal;
  font-weight: normal;
  src: local('SanomatSansMedium'), url('../assets/fonts/Sanomat SansMedium.woff') format('woff');
}

@font-face {
  font-family: 'SanomatSansBold';
  font-style: normal;
  font-weight: normal;
  src: local('SanomatSansBold'), url('../assets/fonts/Sanomat SansBold.woff') format('woff');
}

html {
  box-sizing: border-box;
}

*::before,
*::after,
* {
  box-sizing: border-box;
}

body {
  margin: 0;
  padding: 0;
  color: theme(dark);
  background-color: theme(white);
  font-family: $font-stack-sans-serif;
  letter-spacing: 0.025rem;
  line-height: normal;
  padding-bottom: 6rem;
}

.site {
  display: flex;
  flex-direction: column;
  height: 100vh;

  &__content {
    flex: 1;
  }
}

a {
  color: $link-color;
  text-decoration: $link-decoration;
  outline: 0;
  transition: color 0.1s;

  &:hover,
  &:focus {
    color: $link-hover-color;
    text-decoration: $link-hover-decoration;
  }
}

hr {
  margin: 1rem 0;
  border: 0;
  border-top: 1px solid theme(border);
}

img {
  vertical-align: middle;
}

::selection {
  background-color: theme(primary);
  color: theme(white);
}

button {
  background: none;
  border: none;
  text-align: inherit;
  cursor: pointer;
}

.button:disabled,
.button:hover:disabled,
.button:active:disabled {
  background: #ccc;
  color: #979797;
  border-color: #ccc;
  cursor: not-allowed;
}

@mixin min($bp, $max: 'null', $device: 'screen') {
  @if $max == 'null' {
    @media only #{$device} and (min-width: #{$bp}) {
      @content;
    }
  } @else {
    @media only #{$device} and (min-width: #{$bp}) and (max-width: #{$max}) {
      @content;
    }
  }
}

@function bp($bp) {
  @return map-get($breakpoints, $bp);
}

$breakpoints: (
  na: 0px,
  // For BS grid
  xs: 320px,
  // Smartphone
  sm: 600px,
  // Tablets
  md: 900px,
  // Tablets Landscape and small desktops
  lg: 1400px,
  // Desktops
  xl: 1800px,
  // Large Desktop
);

@function container($container-size, $true-val: false) {
  @return map-get($container-sizes, $container-size);
}

$container-sizes: (
  sm: map-get($breakpoints, sm) - 30px,
  md: map-get($breakpoints, md) - 40px,
  lg: map-get($breakpoints, lg) - 50px,
  xl: map-get($breakpoints, xl) - 400px
);

.container {
  padding: 1rem;

  &:not(.is-fluid) {
    margin: 0 auto;

    @each $bp, $container-size in $container-sizes {
      @include min(#{bp(#{$bp})}) {
        width: 100%;
        max-width: container(#{$bp});
      }
    }
  }
}

@each $bp, $container-size in $container-sizes {
  .container-#{$bp} {
    margin: 0 auto;
    padding-right: 1rem;
    padding-left: 1rem;
    width: 100%;

    $i: index($container-sizes, $bp $container-size);

    @for $j from $i through length($container-sizes) {
      @include min(#{bp(nth(nth($container-sizes, $j), 1))}) {
        max-width: container(#{nth(nth($container-sizes, $j), 1)});
      }
    }
  }
}
